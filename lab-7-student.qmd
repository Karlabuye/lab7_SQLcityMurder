---
title: "Lab 7: SQL Murder - Data types"
author: "Karla Buitrago-Yepes"
format: html
editor: source
markdown:
execute: 
  echo: true
---

For this lab, you will be joining and filtering related data sets to
solve a murder mystery!

# Part 1: GitHub Workflow

At the top of the document (in the YAML) there is an `author` line that
says `"Your name here!"`. Change this to be your name and save your file
either by clicking on the blue floppy disk or with a shortcut (command /
control + s).

Be sure to [commit the files to your
repo](https://happygitwithr.com/existing-github-first#stage-and-commit).

Let's get started!

# Part 2: Some Words of Advice

-   Set chunk options carefully.

-   Make sure you don't print out more output than you need.

-   Make sure you don't assign more objects than necessary---avoid
    "object junk" in your environment.

-   Make your code readable and nicely formatted.

-   Think through your desired result **before** writing any code.

# Part 3: Finding the Killer

Northwestern University's Knight Lab wanted to help sharpen users'
database skills, so they created a murder mystery. Can you solve this
crime in SQL City??

The relational data you will be working with contains tables with
different pieces of information pertinent to the crime - people, social
media check-ins, driver's licenses, crime scene reports, police
interviews, and more!

## Access the Data

This code chunk will read in **all** of the tables of data for you.
Don't modify or remove this! Take some time to look at each file type so
that

```{r}
#| message: false
#| warning: false
#| label: read-in-data

library(tidyverse)

# If purrr is not detected, install the package
if (!"purrr" %in% installed.packages()) install.packages("purrr")

source("https://raw.githubusercontent.com/jcanner/stat_210_2025_website/main/labs/instructions/lab-7-setup.R")
```

## Solve the Crime

### Crime Scene Report

Detective Wickham reaches out to you...

> A crime has taken place and I need your help! There was a murder in
> SQL City sometime on January 15, 2018. Could you retrieve the crime
> scene report from the police departmentâ€™s database and follow the
> clues to find the person responsible for the murder?!

**Step 1: Find the police report in `crime_scene_report`. Then used the
information in the report to move on to the next data source based on
the information learned.**

```{r}
#| label: relevant crime scene report

crime_scene_report |>
  filter(date == '20180115'& #on January 15, 2018
           type == "murder" & #a murder
           city == "SQL City")|>#in SQL City
  pull(description)#pull to see what the report say for valuable information

```

**Next Steps: Follow the evidence to the person responsible for the
murder, building a report as you go.** There are accomplices, some
knowingly and some unknowingly, but there is only one mastermind.

Solve the murder mystery, showing **all of your work in this document**.
Your document and code must be well organized, easy to follow, and
reproducible.

-   Use headers and written descriptions to indicate what you are doing.
-   Use `dplyr` verbs and `join` functions rather than just looking
    through the tables manually. Functions from `stringr` and
    `lubridate` will also be useful.
-   Use good code formatting practices.
-   Comment your code.
-   Cite any external sources you use to solve the mystery. \>cheat
    sheets

### Security Footage Witnesses
```{r}
#| label: information on witnesses 



suspect_list <- bind_rows(
  person |> #the last house on \"Northwestern Dr\
    filter(address_street_name == "Northwestern Dr")|>#all the rows showing the Northwestern Dr street
    arrange(desc(address_number))|>#go from largest to smallest adress number for the "last house on the street"
    slice_head()|> #add the first row (last house)
    mutate(description = "witness"),#when adding this person to suspect_list create description column name them as witness
  person|> #Annabel on Franklin Ave
    filter(str_extract(name, "^[^ ]+") == "Annabel",#stringr start of the "string" then grab characters before two spaces,keeps only rows "Annabel"
           address_street_name == "Franklin Ave")|> # keep only rows with Annabel and Franklin Ave
    mutate(description = "witness")#when adding this person to suspect_list in description column name them as witness
)

suspect_list
```

I found the syntax for [extracting after the fist
name](https://stackoverflow.com/questions/26489276/separate-name-into-firstname-and-lastname-columns-of-data-frame)

## Witnesses say during the Police Interviews

```{r}
#| label: police interviews
interview|>
  filter(person_id %in% c(14887, 16371))|>
  pull(transcript)
```
## Who fits Police interview Descriptions
#### Morty's(14887) suspect description
```{r}
#| label: Morty's(14887) suspect description

#get fit members matching witness descriptions of who ran out 
filter(get_fit_now_member,
       str_starts(id, "48Z") & 
        membership_status == "gold")

#who has a license corresponding to plate H42W
filter(drivers_license,
       str_detect(plate_number, "H42W"))

#person whose license matches the owners of the car that was seen 
filter(person, 
       license_id %in% c(183779,423327,664760))

# person described having run out was Jeremy Bowers added to suspect_list
suspect_list <- bind_rows(
  suspect_list,
  person |> 
    filter(id == 67318)|>
  mutate(description = "witness ID"))

```
#### Annabel's (16371)suspect possibilities
```{r}
#| label: Annabel's suspect possiblities
#| output: false
#people that went to the gym on  January 9th
filter(get_fit_now_check_in, 
       check_in_date == '20180109')

#create a group with the members there on the 9th 
get_fit_now_member |>
  filter(id %in% (get_fit_now_check_in |>
      filter(check_in_date == '20180109') |> #only those from the check in data frame that went in the 9th 
      pull(membership_id)))

#add the people outlined to the suspect list
suspect_list <- bind_rows (
  suspect_list,
  person|>
    filter(id %in% c(15247,28073,55662,10815,83186,31523,92736,28819,67318,16371))|>
    filter(!(name %in% suspect_list$name))|> #skip duplicates
    mutate(description = "@ gym 01/09"))

#Jermey Bowers was also at the gym  on January 9th add to his discription on the suspect list
suspect_list <- suspect_list |>
  mutate(description = if_else(id == 67318, "witness IDed x2", description))
```

```{r}
#| label: suspect list up to this point
suspect_list
```

## Add suspect's facebook events on the 15th to the suspect list

```{r}
#| label: facebook activities

#rename the id variable so are able to join 
suspect_list <- rename(suspect_list, person_id = id)

#find teh events our subjects attended on the 15th
suspect_list <- suspect_list|>
  left_join(facebook_event_checkin|> 
              filter(date == '20180115'),
            by = "person_id")|> # person_ids that had no event listed for the 15th apear as NA's 
  select(-address_number, -address_street_name, -event_id, -ssn)#get rid of variables uneeded

suspect_list
```

> Since Jeremy Bowers is the only suspect that meets the description given by both witnesses and was at the same event as them on the same date he is the most likely murderer. 

::: callout-note
## And the final suspect is...

*Jeremy Bowers*
:::
